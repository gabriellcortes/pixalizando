return(list(src=tmpfile(),contentType="image/png"))
})
output$download_image <- downloadHandler(
filename = function(){
return(str_c("pixel_",input$input_image$name))
},
content = function(file){
return(image_write(modified_image(),file))
},
contentType = "image/png")
##########
}
# Run the application
shinyApp(ui = ui, server = server)
modified_image <- (iter.refine(input$shrinkage,1000))
output$output_image <- renderImage({
tmpfile <- reactive(image_write(modified_image(),tempfile(fileext = "png")))
return(list(src=tmpfile(),contentType="image/png"))
})
output$download_image <- downloadHandler(
filename = function(){
return(str_c("pixel_",input$input_image$name))
},
content = function(file){
return(image_write(modified_image(),file))
},
contentType = "image/png")
}
# Run the application
shinyApp(ui = ui, server = server)
output$output_image <- renderImage({
tmpfile <- reactive(image_write(modified_image(),tempfile(fileext = "png")))
return(list(src=tmpfile(),contentType="image/png"))
})
output$download_image <- downloadHandler(
filename = function(){
return(str_c("pixel_",input$input_image$name))
},
content = function(file){
return(image_write(modified_image(),file))
},
contentType = "image/png")
}
# Run the application
shinyApp(ui = ui, server = server)
server <- function(input, output) {
#observe upload button or URL input box ------------
image <- eventReactive(input$input_image,
image_convert(image_read(input$input_image$datapath),format = "png"))
# image <- eventReactive(input$image_url,
#                        image_convert(image_read(input$image_url),format = "png"))
#get image info once uploaded
your_image_info <- eventReactive(input$input_image,
image_info(image()))
#get configuration for pixelization
image_size <- reactive(str_c(your_image_info()$width,"x",your_image_info()$height))
target_width <- eventReactive(input$shrinkage,
round(your_image_info()$width*input$shrinkage/100))
target_height <- eventReactive(input$shrinkage,
round(your_image_info()$height*input$shrinkage/100))
target_size <- reactive(str_c(target_width(),"x",target_height()))
output$sizes <- renderTable({
req(input$input_image)
return(data.frame("Original Size"=image_size(),
"Converted Size"=target_size()))
})
#map_palette_path <- eventReactive(input$palette,
#                                info_frame %>%
#                                  dplyr::filter(palette_name == input$palette) %>%
#                                  pull(img_path))
#map_palette <- reactive(image_read(map_palette_path()))
#output$my_palette <- renderImage({
#  tempfile1 <- reactive(image_write(map_palette(),tempfile(fileext = "png")))
#  return(list(src=tempfile1(),contentType="image/png"))
#})
modified_image <- reactive(image() %>%
image_modulate(brightness = input$brightness,
saturation = input$saturation,
hue = input$hue) %>%
image_contrast(sharpen = input$sharpen) %>%
image_blur(radius = input$blur_radius,
sigma = input$blur_sigma) %>%
# image_map(map = map_palette()) %>%
image_scale(target_size()) %>%
image_scale(image_size())
)
output$output_image <- renderImage({
tmpfile <- reactive(image_write(modified_image(),tempfile(fileext = "png")))
return(list(src=tmpfile(),contentType="image/png"))
})
output$download_image <- downloadHandler(
filename = function(){
return(str_c("pixel_",input$input_image$name))
},
content = function(file){
return(image_write(modified_image(),file))
},
contentType = "image/png")
##########
}
# Run the application
shinyApp(ui = ui, server = server)
server <- function(input, output) {
#observe upload button or URL input box ------------
image <- eventReactive(input$input_image,
image_convert(image_read(input$input_image$datapath),format = "png"))
# image <- eventReactive(input$image_url,
#                        image_convert(image_read(input$image_url),format = "png"))
#get image info once uploaded
your_image_info <- eventReactive(input$input_image,
image_info(image()))
#get configuration for pixelization
image_size <- reactive(str_c(your_image_info()$width,"x",your_image_info()$height))
target_width <- eventReactive(input$shrinkage,
round(your_image_info()$width*input$shrinkage/100))
target_height <- eventReactive(input$shrinkage,
round(your_image_info()$height*input$shrinkage/100))
target_size <- reactive(str_c(target_width(),"x",target_height()))
output$sizes <- renderTable({
req(input$input_image)
return(data.frame("Original Size"=image_size(),
"Converted Size"=target_size()))
})
#map_palette_path <- eventReactive(input$palette,
#                                info_frame %>%
#                                  dplyr::filter(palette_name == input$palette) %>%
#                                  pull(img_path))
#map_palette <- reactive(image_read(map_palette_path()))
#output$my_palette <- renderImage({
#  tempfile1 <- reactive(image_write(map_palette(),tempfile(fileext = "png")))
#  return(list(src=tempfile1(),contentType="image/png"))
#})
modified_image <- reactive(image() %>%
image_modulate(brightness = input$brightness,
saturation = input$saturation,
hue = input$hue) %>%
image_contrast(sharpen = input$sharpen) %>%
image_blur(radius = input$blur_radius,
sigma = input$blur_sigma) %>%
# image_map(map = map_palette()) %>%
image_scale(target_size()) %>%
image_scale(image_size())
)
output$output_image <- renderImage({
tmpfile <- reactive(image_write(modified_image(),tempfile(fileext = "png")))
return(list(src=tmpfile(),contentType="image/png"))
})
output$plot <- renderPlot({
tmpfile <- reactive(image_write(modified_image(),tempfile(fileext = "png")))
imagem<- list(src=tmpfile(),contentType="image/png")
iter.refine(imagem,1000) %>% rebuild(borders=F) %>% plot
})
output$download_image <- downloadHandler(
filename = function(){
return(str_c("pixel_",input$input_image$name))
},
content = function(file){
return(image_write(modified_image(),file))
},
contentType = "image/png")
##########
}
# Run the application
shinyApp(ui = ui, server = server)
server <- function(input, output) {
#observe upload button or URL input box ------------
image <- eventReactive(input$input_image,
image_convert(image_read(input$input_image$datapath),format = "png"))
# image <- eventReactive(input$image_url,
#                        image_convert(image_read(input$image_url),format = "png"))
#get image info once uploaded
your_image_info <- eventReactive(input$input_image,
image_info(image()))
#get configuration for pixelization
image_size <- reactive(str_c(your_image_info()$width,"x",your_image_info()$height))
target_width <- eventReactive(input$shrinkage,
round(your_image_info()$width*input$shrinkage/100))
target_height <- eventReactive(input$shrinkage,
round(your_image_info()$height*input$shrinkage/100))
target_size <- reactive(str_c(target_width(),"x",target_height()))
output$sizes <- renderTable({
req(input$input_image)
return(data.frame("Original Size"=image_size(),
"Converted Size"=target_size()))
})
#map_palette_path <- eventReactive(input$palette,
#                                info_frame %>%
#                                  dplyr::filter(palette_name == input$palette) %>%
#                                  pull(img_path))
#map_palette <- reactive(image_read(map_palette_path()))
#output$my_palette <- renderImage({
#  tempfile1 <- reactive(image_write(map_palette(),tempfile(fileext = "png")))
#  return(list(src=tempfile1(),contentType="image/png"))
#})
modified_image <- reactive(image() %>%
image_modulate(brightness = input$brightness,
saturation = input$saturation,
hue = input$hue) %>%
image_contrast(sharpen = input$sharpen) %>%
image_blur(radius = input$blur_radius,
sigma = input$blur_sigma) %>%
# image_map(map = map_palette()) %>%
image_scale(target_size()) %>%
image_scale(image_size())
)
## Tentantdo gerar o gr√°fico
#  output$output_image <- renderImage({
#    tmpfile <- reactive(image_write(modified_image(),tempfile(fileext = "png")))
#    return(list(src=tmpfile(),contentType="image/png"))
# })
##
output$plot <- renderPlot({
iter.refine(src=tmpfile(),1000) %>% rebuild(borders=F) %>% plot
})
output$download_image <- downloadHandler(
filename = function(){
return(str_c("pixel_",input$input_image$name))
},
content = function(file){
return(image_write(modified_image(),file))
},
contentType = "image/png")
##########
}
# Run the application
shinyApp(ui = ui, server = server)
server <- function(input, output) {
#observe upload button or URL input box ------------
image <- eventReactive(input$input_image,
image_convert(image_read(input$input_image$datapath),format = "png"))
# image <- eventReactive(input$image_url,
#                        image_convert(image_read(input$image_url),format = "png"))
#get image info once uploaded
your_image_info <- eventReactive(input$input_image,
image_info(image()))
#get configuration for pixelization
image_size <- reactive(str_c(your_image_info()$width,"x",your_image_info()$height))
target_width <- eventReactive(input$shrinkage,
round(your_image_info()$width*input$shrinkage/100))
target_height <- eventReactive(input$shrinkage,
round(your_image_info()$height*input$shrinkage/100))
target_size <- reactive(str_c(target_width(),"x",target_height()))
output$sizes <- renderTable({
req(input$input_image)
return(data.frame("Original Size"=image_size(),
"Converted Size"=target_size()))
})
#map_palette_path <- eventReactive(input$palette,
#                                info_frame %>%
#                                  dplyr::filter(palette_name == input$palette) %>%
#                                  pull(img_path))
#map_palette <- reactive(image_read(map_palette_path()))
#output$my_palette <- renderImage({
#  tempfile1 <- reactive(image_write(map_palette(),tempfile(fileext = "png")))
#  return(list(src=tempfile1(),contentType="image/png"))
#})
modified_image <- reactive(image() %>%
image_modulate(brightness = input$brightness,
saturation = input$saturation,
hue = input$hue) %>%
image_contrast(sharpen = input$sharpen) %>%
image_blur(radius = input$blur_radius,
sigma = input$blur_sigma) %>%
# image_map(map = map_palette()) %>%
image_scale(target_size()) %>%
image_scale(image_size())
)
## Tentantdo gerar o gr√°fico
#  output$output_image <- renderImage({
#    tmpfile <- reactive(image_write(modified_image(),tempfile(fileext = "png")))
#    return(list(src=tmpfile(),contentType="image/png"))
# })
##
output$plot <- renderPlot({
iter.refine(im3,1000) %>% rebuild(borders=F) %>% plot
})
output$download_image <- downloadHandler(
filename = function(){
return(str_c("pixel_",input$input_image$name))
},
content = function(file){
return(image_write(modified_image(),file))
},
contentType = "image/png")
##########
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("lattice")
$git clone https://github.com/gabrimix/pixalizando
git clone https://github.com/gabrimix/pixalizando
library(devtools)
library(devtools)
devtools::setup("C:/Users/Gabriel/Documents/GitHub/pixalizando")
devtools::setup("C:/Users/Gabriel/Documents/GitHub/pixalizando")
devtools::setup("C:/Users/Gabriel/Documents/GitHub/pixalizando")
devtools::setup("C://Users//Gabriel//Documents//GitHub//pixalizando")
setup("C://Users//Gabriel//Documents//GitHub//pixalizando")
setdp("C://Users//Gabriel//Documents//GitHub//pixalizando")
setwd("C://Users//Gabriel//Documents//GitHub//pixalizando")
# Recomendo, para evitar BUGS, o seguinte argumento : setwd(choose.dir())
im3<- load.image("teste.jpg")
qsplit <- function(im){
imsplit(im,"x",2) %>% map(~ imsplit(.,"y",2)) %>%
flatten
}
qunsplit <- function(l){
list(l[1:2],l[3:4]) %>% map(~ imappend(.,"y")) %>%
imappend("x")
}
imsd <- function(im){
imsplit(im,"c") %>% map_dbl(sd) %>% max
}
refine <- function(l){
if (is.cimg(l)){
qs <- qsplit(l)
if (any(dim(l)[1:2] <= 4)){
qs$sds <- rep(0,4) }else{
qs$sds <- map_dbl(qs,imsd)}
qs}else{
indm <- which.max(l$sds)
l[[indm]] <- refine(l[[indm]])
l$sds[indm] <- max(l[[indm]]$sds)
l
}
}
rebuild <- function(l,borders=FALSE){
map(l[-5],~ if (is.cimg(.)) meanim(.,borders=borders)
else rebuild(.,borders=borders)) %>% qunsplit}
# Produz uma imagem que √É¬© uma m√É¬©dia das imagens
meanim <- function(im,borders=FALSE){
im <- imsplit(im,"c") %>% map(~ 0*. + mean(.)) %>%  imappend("c")
if (borders){
im[px.borders(im)] <- 0
}
im
}
iter.refine <- function(im,nIter){
for (i in seq_len(nIter)){
im <- refine(im) };
im
}
iter.refine(im3,2000) %>% rebuild(borders=F) %>% plot
iter.refine(im3,1000) %>% rebuild(borders=F) %>% plot
library(tidyverse)
iter.refine(im3,1000) %>% rebuild(borders=F) %>% plot
qsplit <- function(im){
imsplit(im,"x",2) %>% map(~ imsplit(.,"y",2)) %>%
flatten
}
qunsplit <- function(l){
list(l[1:2],l[3:4]) %>% map(~ imappend(.,"y")) %>%
imappend("x")
}
imsd <- function(im){
imsplit(im,"c") %>% map_dbl(sd) %>% max
}
refine <- function(l){
if (is.cimg(l)){
qs <- qsplit(l)
if (any(dim(l)[1:2] <= 4)){
qs$sds <- rep(0,4) }else{
qs$sds <- map_dbl(qs,imsd)}
qs}else{
indm <- which.max(l$sds)
l[[indm]] <- refine(l[[indm]])
l$sds[indm] <- max(l[[indm]]$sds)
l
}
}
rebuild <- function(l,borders=FALSE){
map(l[-5],~ if (is.cimg(.)) meanim(.,borders=borders)
else rebuild(.,borders=borders)) %>% qunsplit}
# Produz uma imagem que √É¬© uma m√É¬©dia das imagens
meanim <- function(im,borders=FALSE){
im <- imsplit(im,"c") %>% map(~ 0*. + mean(.)) %>%  imappend("c")
if (borders){
im[px.borders(im)] <- 0
}
im
}
iter.refine <- function(im,nIter){
for (i in seq_len(nIter)){
im <- refine(im) };
im
}
iter.refine(im3,1000) %>% rebuild(borders=F) %>% plot
library(imager)
library(tidyverse)
library(purrr)
iter.refine(im3,1000) %>% rebuild(borders=F) %>% plot
# Recomendo, para evitar BUGS, o seguinte argumento : setwd(choose.dir())
im3<- load.image("teste.jpg")
setwd("C:/Users/Gabriel/Documents/Estat√≠stica/2 Semestre/Lista de CE2/Lista extra")
# Recomendo, para evitar BUGS, o seguinte argumento : setwd(choose.dir())
im3<- load.image("teste.jpg")
iter.refine(im3,1000) %>% rebuild(borders=F) %>% plot
#' Soma 2
#'
#' Recebe um vetor de n√∫meros e retorna um vetor de n√∫meros somando dois
#'
#' @param imagem .
#'
#' @export
pixel <- function(imagem) {
qsplit <- function(im){
imsplit(im,"x",2) %>% map(~ imsplit(.,"y",2)) %>%
flatten
}
qunsplit <- function(l){
list(l[1:2],l[3:4]) %>% map(~ imappend(.,"y")) %>%
imappend("x")
}
imsd <- function(im){
imsplit(im,"c") %>% map_dbl(sd) %>% max
}
refine <- function(l){
if (is.cimg(l)){
qs <- qsplit(l)
if (any(dim(l)[1:2] <= 4)){
qs$sds <- rep(0,4) }else{
qs$sds <- map_dbl(qs,imsd)}
qs}else{
indm <- which.max(l$sds)
l[[indm]] <- refine(l[[indm]])
l$sds[indm] <- max(l[[indm]]$sds)
l
}
}
rebuild <- function(l,borders=FALSE){
map(l[-5],~ if (is.cimg(.)) meanim(.,borders=borders)
else rebuild(.,borders=borders)) %>% qunsplit}
# Produz uma imagem que √É¬© uma m√É¬©dia das imagens
meanim <- function(im,borders=FALSE){
im <- imsplit(im,"c") %>% map(~ 0*. + mean(.)) %>%  imappend("c")
if (borders){
im[px.borders(im)] <- 0
}
im
}
iter.refine <- function(im,nIter){
for (i in seq_len(nIter)){
im <- refine(im) };
im
}
resposta<-iter.refine(imagem,1000) %>% rebuild(borders=F) %>% plot
return(resposta)
}
setwd("C://Users//Gabriel//Documents//GitHub//pixalizando")
#' Soma 2
#'
#' Recebe um vetor de n√∫meros e retorna um vetor de n√∫meros somando dois
#'
#' @param imagem .
#'
#' @export
pixel <- function(imagem) {
qsplit <- function(im){
imsplit(im,"x",2) %>% map(~ imsplit(.,"y",2)) %>%
flatten
}
qunsplit <- function(l){
list(l[1:2],l[3:4]) %>% map(~ imappend(.,"y")) %>%
imappend("x")
}
imsd <- function(im){
imsplit(im,"c") %>% map_dbl(sd) %>% max
}
refine <- function(l){
if (is.cimg(l)){
qs <- qsplit(l)
if (any(dim(l)[1:2] <= 4)){
qs$sds <- rep(0,4) }else{
qs$sds <- map_dbl(qs,imsd)}
qs}else{
indm <- which.max(l$sds)
l[[indm]] <- refine(l[[indm]])
l$sds[indm] <- max(l[[indm]]$sds)
l
}
}
rebuild <- function(l,borders=FALSE){
map(l[-5],~ if (is.cimg(.)) meanim(.,borders=borders)
else rebuild(.,borders=borders)) %>% qunsplit}
# Produz uma imagem que √É¬© uma m√É¬©dia das imagens
meanim <- function(im,borders=FALSE){
im <- imsplit(im,"c") %>% map(~ 0*. + mean(.)) %>%  imappend("c")
if (borders){
im[px.borders(im)] <- 0
}
im
}
iter.refine <- function(im,nIter){
for (i in seq_len(nIter)){
im <- refine(im) };
im
}
resposta<-iter.refine(imagem,1000) %>% rebuild(borders=F) %>% plot
return(resposta)
}
devtools::document()
devtools::document()
setwd("C://Users//Gabriel//Documents//GitHub//pixalizando")
library(devtools)
devtools::document()
install.packages(roxygen2)
install.packages("roxygen2")
install.packages("roxygen2")
library(roxygen2)
library(devtools)
create(pixalizando)
create("pixalizando")
